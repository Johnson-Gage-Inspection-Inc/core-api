from collections.abc import Mapping
from typing import Any, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET as UNSET
from ..types import Unset as Unset

T = TypeVar("T", bound="QualerApiModelsAssetToAssetsCountResponseModel")

@_attrs_define
class QualerApiModelsAssetToAssetsCountResponseModel:
    assets_all: Unset | int = ...
    assets_collected: Unset | int = ...
    assets_recently_serviced: Unset | int = ...
    assets_due: Unset | int = ...
    assets_past_due: Unset | int = ...
    assets_service_pending: Unset | int = ...
    assets_recently_purchased: Unset | int = ...
    assets_warranty_expires: Unset | int = ...
    assets_due_for_replacement: Unset | int = ...
    assets_out_of_service: Unset | int = ...
    assets_not_serviced: Unset | int = ...
    assets_without_schedule: Unset | int = ...
    assets_without_vendor: Unset | int = ...
    assets_without_product: Unset | int = ...
    assets_added: Unset | int = ...
    assets_updated: Unset | int = ...
    assets_deleted: Unset | int = ...
    assets_no_agreement: Unset | int = ...
    assets_expired_agreement: Unset | int = ...
    assets_expiring_soon_agreement: Unset | int = ...
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: Mapping[str, Any]) -> T: ...
    @property
    def additional_keys(self) -> list[str]: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __contains__(self, key: str) -> bool: ...

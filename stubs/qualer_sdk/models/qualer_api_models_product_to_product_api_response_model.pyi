from collections.abc import Mapping
from typing import Any, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET as UNSET
from ..types import Unset as Unset

T = TypeVar("T", bound="QualerApiModelsProductToProductApiResponseModel")

@_attrs_define
class QualerApiModelsProductToProductApiResponseModel:
    product_id: Unset | int = ...
    parent_product_id: Unset | int = ...
    category_id: Unset | int = ...
    manufacturer_id: Unset | int = ...
    manufacturer_name: Unset | str = ...
    product_name: Unset | str = ...
    parent_product_name: Unset | str = ...
    manufacturer_part_number: Unset | str = ...
    product_description: Unset | str = ...
    is_family: Unset | bool = ...
    is_discontinued: Unset | bool = ...
    is_stock_item: Unset | bool = ...
    unit_sale_price: Unset | float = ...
    supplier_information: Unset | str = ...
    quantity_on_hand: Unset | int = ...
    product_code: Unset | str = ...
    category_name: Unset | str = ...
    parent_category_name: Unset | str = ...
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: Mapping[str, Any]) -> T: ...
    @property
    def additional_keys(self) -> list[str]: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __contains__(self, key: str) -> bool: ...

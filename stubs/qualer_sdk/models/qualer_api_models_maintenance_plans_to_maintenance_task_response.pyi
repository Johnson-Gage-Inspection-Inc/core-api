from collections.abc import Mapping
from typing import Any, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET as UNSET
from ..types import Unset as Unset

T = TypeVar("T", bound="QualerApiModelsMaintenancePlansToMaintenanceTaskResponse")

@_attrs_define
class QualerApiModelsMaintenancePlansToMaintenanceTaskResponse:
    segment_name: Unset | str = ...
    service_level_id: Unset | int = ...
    display_order: Unset | int = ...
    service_notes: Unset | str = ...
    interval_cycle: Unset | str = ...
    interval_length: Unset | int = ...
    on_day: Unset | str = ...
    on_month: Unset | str = ...
    on_week_days: Unset | str = ...
    weekday_of_month: Unset | str = ...
    color_code: Unset | int = ...
    service_interval: Unset | str = ...
    on_segment_id: Unset | int = ...
    document_number: Unset | str = ...
    document_section: Unset | str = ...
    as_found_standard_group_id: Unset | int = ...
    as_left_standard_group_id: Unset | int = ...
    task_notes: Unset | str = ...
    advance_recall_period: Unset | str = ...
    days_before_due: Unset | int = ...
    past_due_grace_period: Unset | str = ...
    days_after_due: Unset | int = ...
    use_period_in_reports: Unset | str = ...
    generate_order_automatically: Unset | bool = ...
    approve_upon_generation: Unset | bool = ...
    generate_separate: Unset | bool = ...
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: Mapping[str, Any]) -> T: ...
    @property
    def additional_keys(self) -> list[str]: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __contains__(self, key: str) -> bool: ...

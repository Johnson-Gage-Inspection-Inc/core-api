from collections.abc import Mapping
from typing import Any, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET as UNSET
from ..types import Unset as Unset

T = TypeVar("T", bound="QualerApiModelsReportDatasetsToExternalDataReportResponse")

@_attrs_define
class QualerApiModelsReportDatasetsToExternalDataReportResponse:
    measurement_set_id: Unset | int = ...
    service_order_item_id: Unset | int = ...
    row: Unset | int = ...
    a: Unset | str = ...
    b: Unset | str = ...
    c: Unset | str = ...
    d: Unset | str = ...
    e: Unset | str = ...
    f: Unset | str = ...
    g: Unset | str = ...
    h: Unset | str = ...
    i: Unset | str = ...
    j: Unset | str = ...
    k: Unset | str = ...
    l: Unset | str = ...
    m: Unset | str = ...
    n: Unset | str = ...
    o: Unset | str = ...
    p: Unset | str = ...
    q: Unset | str = ...
    r: Unset | str = ...
    s: Unset | str = ...
    t: Unset | str = ...
    u: Unset | str = ...
    v: Unset | str = ...
    w: Unset | str = ...
    x: Unset | str = ...
    y: Unset | str = ...
    z: Unset | str = ...
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: Mapping[str, Any]) -> T: ...
    @property
    def additional_keys(self) -> list[str]: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __contains__(self, key: str) -> bool: ...

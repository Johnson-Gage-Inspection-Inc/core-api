import datetime
from collections.abc import Mapping
from typing import Any, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.qualer_api_models_clients_to_employee_employee_department_response import (
    QualerApiModelsClientsToEmployeeEmployeeDepartmentResponse as QualerApiModelsClientsToEmployeeEmployeeDepartmentResponse,
)
from ..types import UNSET as UNSET
from ..types import Unset as Unset

T = TypeVar("T", bound="QualerApiModelsClientsToEmployeeResponseModel")

@_attrs_define
class QualerApiModelsClientsToEmployeeResponseModel:
    employee_id: Unset | int = ...
    first_name: Unset | str = ...
    last_name: Unset | str = ...
    company_id: Unset | int = ...
    login_email: Unset | str = ...
    departments: (
        Unset | list["QualerApiModelsClientsToEmployeeEmployeeDepartmentResponse"]
    ) = ...
    subscription_email: Unset | str = ...
    subscription_phone: Unset | str = ...
    office_phone: Unset | str = ...
    is_locked: Unset | bool = ...
    image_url: Unset | str = ...
    alias: Unset | str = ...
    title: Unset | str = ...
    is_deleted: Unset | bool = ...
    last_seen_date_utc: Unset | datetime.datetime = ...
    culture_name: Unset | str = ...
    culture_ui_name: Unset | str = ...
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: Mapping[str, Any]) -> T: ...
    @property
    def additional_keys(self) -> list[str]: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __contains__(self, key: str) -> bool: ...

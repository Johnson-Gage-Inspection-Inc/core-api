import datetime
from collections.abc import Mapping
from typing import Any, TypeVar
from uuid import UUID

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.qualer_api_models_service_orders_to_provider_service_order_response_model_order_status import (
    QualerApiModelsServiceOrdersToProviderServiceOrderResponseModelOrderStatus as QualerApiModelsServiceOrdersToProviderServiceOrderResponseModelOrderStatus,
)
from ..models.qualer_api_models_service_orders_to_provider_service_order_response_model_timeframe import (
    QualerApiModelsServiceOrdersToProviderServiceOrderResponseModelTimeframe as QualerApiModelsServiceOrdersToProviderServiceOrderResponseModelTimeframe,
)
from ..types import UNSET as UNSET
from ..types import Unset as Unset

T = TypeVar(
    "T", bound="QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel"
)

@_attrs_define
class QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel:
    service_order_id: Unset | int = ...
    guid: Unset | UUID = ...
    service_order_number: Unset | int = ...
    custom_order_number: Unset | str = ...
    due_date: Unset | datetime.datetime = ...
    assets: Unset | int = ...
    completed_assets: Unset | int = ...
    order_status: (
        Unset
        | QualerApiModelsServiceOrdersToProviderServiceOrderResponseModelOrderStatus
    ) = ...
    is_quality_control_fail: Unset | bool = ...
    service_private_comments: Unset | str = ...
    client_company_id: Unset | int = ...
    client_company_name: Unset | str = ...
    client_site_name: Unset | str = ...
    client_legacy_id: Unset | str = ...
    business_from_time: Unset | datetime.datetime = ...
    business_to_time: Unset | datetime.datetime = ...
    timeframe: (
        Unset | QualerApiModelsServiceOrdersToProviderServiceOrderResponseModelTimeframe
    ) = ...
    site_access_notes: Unset | str = ...
    desired_date: Unset | datetime.datetime = ...
    deadline_date: Unset | datetime.datetime = ...
    request_from_date: Unset | datetime.datetime = ...
    request_from_time: Unset | datetime.datetime = ...
    request_to_date: Unset | datetime.datetime = ...
    request_to_time: Unset | datetime.datetime = ...
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: Mapping[str, Any]) -> T: ...
    @property
    def additional_keys(self) -> list[str]: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __contains__(self, key: str) -> bool: ...

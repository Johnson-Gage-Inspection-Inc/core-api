import datetime
from collections.abc import Mapping
from typing import Any, TypeVar

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.qualer_api_models_clients_from_asset_model_asset_status import (
    QualerApiModelsClientsFromAssetModelAssetStatus as QualerApiModelsClientsFromAssetModelAssetStatus,
)
from ..types import UNSET as UNSET
from ..types import Unset as Unset

T = TypeVar("T", bound="QualerApiModelsClientsFromAssetModel")

@_attrs_define
class QualerApiModelsClientsFromAssetModel:
    site_id: Unset | int = ...
    product_id: Unset | int = ...
    manufacturer: Unset | str = ...
    manufacturer_part_number: Unset | str = ...
    category_id: Unset | int = ...
    serial_number: Unset | str = ...
    asset_tag: Unset | str = ...
    asset_user: Unset | str = ...
    asset_status: Unset | QualerApiModelsClientsFromAssetModelAssetStatus = ...
    asset_name: Unset | str = ...
    asset_description: Unset | str = ...
    asset_maker: Unset | str = ...
    location: Unset | str = ...
    retirement_reason: Unset | str = ...
    barcode: Unset | str = ...
    legacy_identifier: Unset | str = ...
    condition: Unset | str = ...
    criticality: Unset | str = ...
    purchase_date: Unset | datetime.datetime = ...
    purchase_cost: Unset | float = ...
    life_span_months: Unset | int = ...
    activation_date: Unset | datetime.datetime = ...
    depreciation_basis: Unset | float = ...
    depreciation_method: Unset | int = ...
    retirement_date: Unset | datetime.datetime = ...
    salvage_value: Unset | float = ...
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)
    def to_dict(self) -> dict[str, Any]: ...
    @classmethod
    def from_dict(cls, src_dict: Mapping[str, Any]) -> T: ...
    @property
    def additional_keys(self) -> list[str]: ...
    def __getitem__(self, key: str) -> Any: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __contains__(self, key: str) -> bool: ...

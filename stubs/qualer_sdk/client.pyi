from typing import Any

import httpx
from attrs import define, field

@define
class Client:
    raise_on_unexpected_status: bool = field(default=False, kw_only=True)
    def with_headers(self, headers: dict[str, str]) -> Client: ...
    def with_cookies(self, cookies: dict[str, str]) -> Client: ...
    def with_timeout(self, timeout: httpx.Timeout) -> Client: ...
    def set_httpx_client(self, client: httpx.Client) -> Client: ...
    def get_httpx_client(self) -> httpx.Client: ...
    def __enter__(self) -> Client: ...
    def __exit__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_async_httpx_client(self, async_client: httpx.AsyncClient) -> Client: ...
    def get_async_httpx_client(self) -> httpx.AsyncClient: ...
    async def __aenter__(self) -> Client: ...
    async def __aexit__(self, *args: Any, **kwargs: Any) -> None: ...

@define
class AuthenticatedClient:
    raise_on_unexpected_status: bool = field(default=False, kw_only=True)
    token: str
    prefix: str = ...
    auth_header_name: str = ...
    def with_headers(self, headers: dict[str, str]) -> AuthenticatedClient: ...
    def with_cookies(self, cookies: dict[str, str]) -> AuthenticatedClient: ...
    def with_timeout(self, timeout: httpx.Timeout) -> AuthenticatedClient: ...
    def set_httpx_client(self, client: httpx.Client) -> AuthenticatedClient: ...
    def get_httpx_client(self) -> httpx.Client: ...
    def __enter__(self) -> AuthenticatedClient: ...
    def __exit__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_async_httpx_client(
        self, async_client: httpx.AsyncClient
    ) -> AuthenticatedClient: ...
    def get_async_httpx_client(self) -> httpx.AsyncClient: ...
    async def __aenter__(self) -> AuthenticatedClient: ...
    async def __aexit__(self, *args: Any, **kwargs: Any) -> None: ...

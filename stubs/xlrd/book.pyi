from _typeshed import Incomplete

from . import compdoc as compdoc
from . import formatting as formatting
from . import sheet as sheet
from .biffh import *
from .formula import *
from .timemachine import *

empty_cell: Incomplete
DEBUG: int
MY_EOF: int
SUPBOOK_UNK: Incomplete
SUPBOOK_INTERNAL: Incomplete
SUPBOOK_EXTERNAL: Incomplete
SUPBOOK_ADDIN: Incomplete
SUPBOOK_DDEOLE: Incomplete
SUPPORTED_VERSIONS: Incomplete
builtin_name_from_code: Incomplete
code_from_builtin_name: Incomplete

def open_workbook_xls(
    filename: Incomplete | None = None,
    logfile=...,
    verbosity: int = 0,
    use_mmap: bool = True,
    file_contents: Incomplete | None = None,
    encoding_override: Incomplete | None = None,
    formatting_info: bool = False,
    on_demand: bool = False,
    ragged_rows: bool = False,
    ignore_workbook_corruption: bool = False,
): ...

class Name(BaseObject):
    book: Incomplete
    hidden: int
    func: int
    vbasic: int
    macro: int
    complex: int
    builtin: int
    funcgroup: int
    binary: int
    name_index: int
    name: Incomplete
    raw_formula: bytes
    scope: int
    result: Incomplete
    def cell(self): ...
    def area2d(self, clipped: bool = True): ...

class Book(BaseObject):
    nsheets: int
    datemode: int
    biff_version: int
    name_obj_list: Incomplete
    codepage: Incomplete
    encoding: Incomplete
    countries: Incomplete
    user_name: Incomplete
    font_list: Incomplete
    xf_list: Incomplete
    format_list: Incomplete
    format_map: Incomplete
    style_name_map: Incomplete
    colour_map: Incomplete
    palette_record: Incomplete
    load_time_stage_1: float
    load_time_stage_2: float
    def sheets(self): ...
    def sheet_by_index(self, sheetx): ...
    def __iter__(self): ...
    def sheet_by_name(self, sheet_name): ...
    def __getitem__(self, item): ...
    def sheet_names(self): ...
    def sheet_loaded(self, sheet_name_or_index): ...
    def unload_sheet(self, sheet_name_or_index) -> None: ...
    mem: Incomplete
    filestr: Incomplete
    def release_resources(self) -> None: ...
    def __enter__(self): ...
    def __exit__(
        self,
        exc_type: type[BaseException] | None,
        exc_value: BaseException | None,
        exc_tb: types.TracebackType | None,
    ) -> None: ...
    name_and_scope_map: Incomplete
    name_map: Incomplete
    raw_user_name: bool
    builtinfmtcount: int
    addin_func_names: Incomplete
    def __init__(self) -> None: ...
    logfile: Incomplete
    verbosity: Incomplete
    use_mmap: Incomplete
    encoding_override: Incomplete
    formatting_info: Incomplete
    on_demand: Incomplete
    ragged_rows: Incomplete
    stream_len: Incomplete
    base: int
    def biff2_8_load(
        self,
        filename: Incomplete | None = None,
        file_contents: Incomplete | None = None,
        logfile=...,
        verbosity: int = 0,
        use_mmap: bool = True,
        encoding_override: Incomplete | None = None,
        formatting_info: bool = False,
        on_demand: bool = False,
        ragged_rows: bool = False,
        ignore_workbook_corruption: bool = False,
    ) -> None: ...
    xfcount: int
    actualfmtcount: int
    def initialise_format_info(self) -> None: ...
    def get2bytes(self): ...
    def get_record_parts(self): ...
    def get_record_parts_conditional(self, reqd_record): ...
    def get_sheet(self, sh_number, update_pos: bool = True): ...
    def get_sheets(self) -> None: ...
    def fake_globals_get_sheet(self) -> None: ...
    def handle_boundsheet(self, data) -> None: ...
    def handle_builtinfmtcount(self, data) -> None: ...
    def derive_encoding(self): ...
    def handle_codepage(self, data) -> None: ...
    def handle_country(self, data) -> None: ...
    def handle_datemode(self, data) -> None: ...
    def handle_externname(self, data) -> None: ...
    def handle_externsheet(self, data) -> None: ...
    def handle_filepass(self, data) -> None: ...
    def handle_name(self, data) -> None: ...
    def names_epilogue(self) -> None: ...
    def handle_obj(self, data) -> None: ...
    def handle_supbook(self, data) -> None: ...
    def handle_sheethdr(self, data) -> None: ...
    def handle_sheetsoffset(self, data) -> None: ...
    def handle_sst(self, data) -> None: ...
    def handle_writeaccess(self, data) -> None: ...
    def parse_globals(self) -> None: ...
    def read(self, pos, length): ...
    def getbof(self, rqd_stream): ...

def expand_cell_address(inrow, incol): ...
def colname(colx, _A2Z: str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"): ...
def display_cell_address(rowx, colx, relrow, relcol): ...
def unpack_SST_table(datatab, nstrings): ...

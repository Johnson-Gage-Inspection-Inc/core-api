from collections import MutableMapping

from _typeshed import Incomplete

class _ExpiringMapping(MutableMapping):
    def __init__(
        self,
        mapping: Incomplete | None = None,
        capacity: Incomplete | None = None,
        expires_in: Incomplete | None = None,
        lock: Incomplete | None = None,
        *args,
        **kwargs,
    ) -> None: ...
    def set(self, key, value, expires_in) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def __getitem__(self, key): ...
    def __delitem__(self, key) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...

class _IndividualCache:
    def __init__(
        self,
        mapping: Incomplete | None = None,
        key_maker: Incomplete | None = None,
        expires_in: Incomplete | None = None,
    ) -> None: ...
    def __call__(self, function): ...

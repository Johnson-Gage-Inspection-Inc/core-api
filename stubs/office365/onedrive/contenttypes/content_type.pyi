from _typeshed import Incomplete
from office365.entity_collection import EntityCollection as EntityCollection
from office365.onedrive.base_item import BaseItem as BaseItem
from office365.onedrive.columns.column_link import ColumnLink as ColumnLink
from office365.onedrive.columns.definition import ColumnDefinition as ColumnDefinition
from office365.onedrive.contenttypes.order import ContentTypeOrder as ContentTypeOrder
from office365.onedrive.documentsets.content import DocumentSetContent as DocumentSetContent
from office365.onedrive.documentsets.document_set import DocumentSet as DocumentSet
from office365.onedrive.listitems.item_reference import ItemReference as ItemReference
from office365.runtime.client_result import ClientResult as ClientResult
from office365.runtime.paths.resource_path import ResourcePath as ResourcePath
from office365.runtime.queries.function import FunctionQuery as FunctionQuery
from office365.runtime.queries.service_operation import ServiceOperationQuery as ServiceOperationQuery
from office365.runtime.types.collections import StringCollection as StringCollection

class ContentType(BaseItem):
    def is_published(self): ...
    def associate_with_hub_sites(self, hub_site_urls, propagate_to_existing_lists: bool = False): ...
    def publish(self): ...
    def unpublish(self): ...
    @property
    def associated_hubs_urls(self): ...
    @property
    def document_set(self): ...
    @property
    def document_template(self): ...
    @property
    def name(self) -> str | None: ...
    @property
    def description(self) -> str | None: ...
    @property
    def parent_id(self) -> str | None: ...
    @property
    def propagate_changes(self) -> bool | None: ...
    @property
    def read_only(self) -> bool | None: ...
    @property
    def inherited_from(self): ...
    @property
    def column_links(self) -> EntityCollection[ColumnLink]: ...
    @property
    def base(self): ...
    @property
    def base_types(self) -> EntityCollection['ContentType']: ...
    @property
    def columns(self) -> EntityCollection[ColumnDefinition]: ...
    @property
    def column_positions(self) -> EntityCollection[ColumnDefinition]: ...
    @property
    def order(self): ...
    def get_property(self, name, default_value: Incomplete | None = None): ...

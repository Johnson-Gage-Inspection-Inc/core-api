import datetime
from typing import AnyStr

from _typeshed import Incomplete
from office365.runtime.client_result import ClientResult as ClientResult
from office365.runtime.client_value_collection import (
    ClientValueCollection as ClientValueCollection,
)
from office365.runtime.paths.resource_path import ResourcePath as ResourcePath
from office365.runtime.paths.service_operation import (
    ServiceOperationPath as ServiceOperationPath,
)
from office365.runtime.queries.client_query import ClientQuery as ClientQuery
from office365.runtime.queries.service_operation import (
    ServiceOperationQuery as ServiceOperationQuery,
)
from office365.runtime.types.collections import StringCollection as StringCollection
from office365.sharepoint.activities.entity import SPActivityEntity as SPActivityEntity
from office365.sharepoint.activities.logger import ActivityLogger as ActivityLogger
from office365.sharepoint.alerts.collection import AlertCollection as AlertCollection
from office365.sharepoint.authentication.acs_service_principal_info import (
    SPACSServicePrincipalInfo as SPACSServicePrincipalInfo,
)
from office365.sharepoint.businessdata.app_bdc_catalog import (
    AppBdcCatalog as AppBdcCatalog,
)
from office365.sharepoint.changes.collection import ChangeCollection as ChangeCollection
from office365.sharepoint.changes.query import ChangeQuery as ChangeQuery
from office365.sharepoint.client_context import ClientContext as ClientContext
from office365.sharepoint.clientsidecomponent.hostedapps.manager import (
    HostedAppsManager as HostedAppsManager,
)
from office365.sharepoint.clientsidecomponent.identifier import (
    SPClientSideComponentIdentifier as SPClientSideComponentIdentifier,
)
from office365.sharepoint.clientsidecomponent.query_result import (
    SPClientSideComponentQueryResult as SPClientSideComponentQueryResult,
)
from office365.sharepoint.clientsidecomponent.storage_entity import (
    StorageEntity as StorageEntity,
)
from office365.sharepoint.contenttypes.collection import (
    ContentTypeCollection as ContentTypeCollection,
)
from office365.sharepoint.entity_collection import EntityCollection as EntityCollection
from office365.sharepoint.eventreceivers.definition_collection import (
    EventReceiverDefinitionCollection as EventReceiverDefinitionCollection,
)
from office365.sharepoint.features.collection import (
    FeatureCollection as FeatureCollection,
)
from office365.sharepoint.fields.collection import FieldCollection as FieldCollection
from office365.sharepoint.fields.datetime_field_format_type import (
    DateTimeFieldFormatType as DateTimeFieldFormatType,
)
from office365.sharepoint.files.file import File as File
from office365.sharepoint.flows.synchronization_result import (
    FlowSynchronizationResult as FlowSynchronizationResult,
)
from office365.sharepoint.folders.collection import FolderCollection as FolderCollection
from office365.sharepoint.folders.folder import Folder as Folder
from office365.sharepoint.internal.paths.web import WebPath as WebPath
from office365.sharepoint.largeoperation.operation import (
    SPLargeOperation as SPLargeOperation,
)
from office365.sharepoint.listitems.listitem import ListItem as ListItem
from office365.sharepoint.lists.collection import ListCollection as ListCollection
from office365.sharepoint.lists.creation_information import (
    ListCreationInformation as ListCreationInformation,
)
from office365.sharepoint.lists.document_library_information import (
    DocumentLibraryInformation as DocumentLibraryInformation,
)
from office365.sharepoint.lists.get_parameters import (
    GetListsParameters as GetListsParameters,
)
from office365.sharepoint.lists.list import List as List
from office365.sharepoint.lists.render_data_parameters import (
    RenderListDataParameters as RenderListDataParameters,
)
from office365.sharepoint.lists.template_collection import (
    ListTemplateCollection as ListTemplateCollection,
)
from office365.sharepoint.lists.template_type import (
    ListTemplateType as ListTemplateType,
)
from office365.sharepoint.marketplace.corporatecuratedgallery.addins.principals_response import (
    SPGetAddinPrincipalsResponse as SPGetAddinPrincipalsResponse,
)
from office365.sharepoint.marketplace.corporatecuratedgallery.available_addins_response import (
    SPAvailableAddinsResponse as SPAvailableAddinsResponse,
)
from office365.sharepoint.marketplace.sitecollection.appcatalog.accessor import (
    SiteCollectionCorporateCatalogAccessor as SiteCollectionCorporateCatalogAccessor,
)
from office365.sharepoint.marketplace.tenant.appcatalog.accessor import (
    TenantCorporateCatalogAccessor as TenantCorporateCatalogAccessor,
)
from office365.sharepoint.navigation.navigation import Navigation as Navigation
from office365.sharepoint.permissions.base_permissions import (
    BasePermissions as BasePermissions,
)
from office365.sharepoint.permissions.roles.definitions.collection import (
    RoleDefinitionCollection as RoleDefinitionCollection,
)
from office365.sharepoint.permissions.securable_object import (
    SecurableObject as SecurableObject,
)
from office365.sharepoint.principal.groups.collection import (
    GroupCollection as GroupCollection,
)
from office365.sharepoint.principal.groups.group import Group as Group
from office365.sharepoint.principal.users.collection import (
    UserCollection as UserCollection,
)
from office365.sharepoint.principal.users.user import User as User
from office365.sharepoint.pushnotifications.collection import (
    PushNotificationSubscriberCollection as PushNotificationSubscriberCollection,
)
from office365.sharepoint.pushnotifications.subscriber import (
    PushNotificationSubscriber as PushNotificationSubscriber,
)
from office365.sharepoint.recyclebin.item_collection import (
    RecycleBinItemCollection as RecycleBinItemCollection,
)
from office365.sharepoint.sharing.external_site_option import (
    ExternalSharingSiteOption as ExternalSharingSiteOption,
)
from office365.sharepoint.sharing.links.access_request import (
    SharingLinkAccessRequest as SharingLinkAccessRequest,
)
from office365.sharepoint.sharing.links.data import SharingLinkData as SharingLinkData
from office365.sharepoint.sharing.object_sharing_settings import (
    ObjectSharingSettings as ObjectSharingSettings,
)
from office365.sharepoint.sharing.result import SharingResult as SharingResult
from office365.sharepoint.sharing.shared_document_info import (
    SharedDocumentInfo as SharedDocumentInfo,
)
from office365.sharepoint.sitescripts.serialization_info import (
    SiteScriptSerializationInfo as SiteScriptSerializationInfo,
)
from office365.sharepoint.sitescripts.serialization_result import (
    SiteScriptSerializationResult as SiteScriptSerializationResult,
)
from office365.sharepoint.sitescripts.utility import (
    SiteScriptUtility as SiteScriptUtility,
)
from office365.sharepoint.translation.resource_entry import (
    SPResourceEntry as SPResourceEntry,
)
from office365.sharepoint.translation.user_resource import UserResource as UserResource
from office365.sharepoint.ui.applicationpages.peoplepicker.web_service_interface import (
    ClientPeoplePickerWebServiceInterface as ClientPeoplePickerWebServiceInterface,
)
from office365.sharepoint.usercustomactions.collection import (
    UserCustomActionCollection as UserCustomActionCollection,
)
from office365.sharepoint.views.view import View as View
from office365.sharepoint.webparts.client.collection import (
    ClientWebPartCollection as ClientWebPartCollection,
)
from office365.sharepoint.webs.calendar_type import CalendarType as CalendarType
from office365.sharepoint.webs.context_web_information import (
    ContextWebInformation as ContextWebInformation,
)
from office365.sharepoint.webs.dataleakage_prevention_status_info import (
    SPDataLeakagePreventionStatusInfo as SPDataLeakagePreventionStatusInfo,
)
from office365.sharepoint.webs.information_collection import (
    WebInformationCollection as WebInformationCollection,
)
from office365.sharepoint.webs.modernize_homepage_result import (
    ModernizeHomepageResult as ModernizeHomepageResult,
)
from office365.sharepoint.webs.multilingual_settings import (
    MultilingualSettings as MultilingualSettings,
)
from office365.sharepoint.webs.regional_settings import (
    RegionalSettings as RegionalSettings,
)
from office365.sharepoint.webs.template_collection import (
    WebTemplateCollection as WebTemplateCollection,
)
from office365.sharepoint.webs.theme_info import ThemeInfo as ThemeInfo

class Web(SecurableObject):
    def __init__(self, context, resource_path: Incomplete | None = None) -> None: ...
    def add_list(self, title, template_type=...): ...
    def available_addins(self, server_relative_urls: Incomplete | None = None): ...
    def add_cross_farm_message(self, message: str) -> ClientResult[bool]: ...
    def get_access_request_list(self): ...
    def get_adaptive_card_extensions(
        self,
        include_errors: Incomplete | None = None,
        project: Incomplete | None = None,
    ): ...
    def get_document_by_doc_id(self, doc_id): ...
    def get_site_script(
        self,
        include_branding: bool = True,
        included_lists: Incomplete | None = None,
        include_links_to_exported_items: bool = True,
        include_regional_settings: bool = True,
    ): ...
    def consent_to_power_platform(self): ...
    def get_list_data_as_stream(self, path, view_xml: Incomplete | None = None): ...
    def get_onedrive_list_data_as_stream(self, view_xml: Incomplete | None = None): ...
    def get_list_operation(
        self, list_id: str, operation_id: str
    ) -> SPLargeOperation: ...
    def get_push_notification_subscriber(self, device_app_instance_id): ...
    def get_client_side_components(self, components): ...
    def get_client_side_components_by_component_type(self, component_types): ...
    def get_push_notification_subscribers_by_user(self, user): ...
    @staticmethod
    def create_organization_sharing_link(context, url, is_edit_link: bool = False): ...
    @staticmethod
    def destroy_organization_sharing_link(
        context, url, is_edit_link, remove_associated_sharing_link_group
    ): ...
    @staticmethod
    def get_context_web_information(context): ...
    @staticmethod
    def get_web_url_from_page_url(context, page_full_url): ...
    def create_default_associated_groups(
        self, user_login, user_login2, group_name_seed
    ): ...
    def create_group_based_environment(self): ...
    def get_group_based_environment(self): ...
    def get_acs_service_principals(self, app_ids: Incomplete | None = None): ...
    def sync_flow_instances(self, target_web_url): ...
    def sync_flow_templates(self, category): ...
    def get_all_client_side_components(self): ...
    def get_addin_principals_having_permissions_in_sites(
        self,
        server_relative_urls: Incomplete | None = None,
        urls: Incomplete | None = None,
    ): ...
    def get_app_bdc_catalog(self): ...
    def get_client_side_web_parts(
        self, project: Incomplete | None = None, include_errors: bool = False
    ): ...
    def add_supported_ui_language(self, lcid): ...
    def get_lists(self, row_limit: int = 100): ...
    def get_sub_webs_filtered_for_current_user(self, query): ...
    def get_recycle_bin_items(
        self,
        paging_info: Incomplete | None = None,
        row_limit: int = 100,
        is_ascending: bool = True,
        order_by: Incomplete | None = None,
        item_state: Incomplete | None = None,
    ): ...
    def get_recycle_bin_items_by_query_info(
        self,
        is_ascending: bool = True,
        item_state: Incomplete | None = None,
        order_by: Incomplete | None = None,
        paging_info: Incomplete | None = None,
        row_limit: int = 100,
        show_only_my_items: bool = False,
    ): ...
    def get_all_webs(self): ...
    def get_list_using_path(self, decoded_url): ...
    def get_news_list(self, allow_create: bool = False): ...
    def get_view_from_url(self, list_url): ...
    def get_view_from_path(self, decoded_url): ...
    def get_regional_datetime_schema(self): ...
    def get_sharing_link_data(self, link_url: str) -> ClientResult[SharingLinkData]: ...
    @staticmethod
    def get_context_web_theme_data(context: ClientContext) -> ClientResult[str]: ...
    def create_site_page(self, page_metadata): ...
    @staticmethod
    def create_anonymous_link(
        context, url, is_edit_link, return_type: Incomplete | None = None
    ): ...
    @staticmethod
    def create_anonymous_link_with_expiration(
        context,
        url,
        is_edit_link,
        expiration_string,
        return_type: Incomplete | None = None,
    ): ...
    @staticmethod
    def get_object_sharing_settings(
        context,
        object_url,
        group_id: Incomplete | None = None,
        use_simplified_roles: Incomplete | None = None,
        return_type: Incomplete | None = None,
    ): ...
    def get_client_side_components_by_id(
        self, component_ids: Incomplete | None = None
    ): ...
    def get_file_by_server_relative_url(self, server_relative_url: str) -> File: ...
    def get_file_by_server_relative_path(self, path: str) -> File: ...
    def get_folder_by_server_relative_url(self, url: str) -> Folder: ...
    def get_folder_by_server_relative_path(self, decoded_url: str) -> Folder: ...
    def get_site_page_copy_to_status(self, work_item_id): ...
    def get_site_page_move_status(self, work_item_id): ...
    def ensure_folder_path(self, path): ...
    def ensure_edu_class_setup(self, bypass_for_automation): ...
    def ensure_user(self, login_name): ...
    def ensure_tenant_app_catalog(self, caller_id): ...
    def get_list_by_title(self, title): ...
    def does_user_have_permissions(self, permission_mask): ...
    def does_push_notification_subscriber_exist(self, device_app_instance_id): ...
    def get_folder_by_id(self, unique_id): ...
    def get_user_by_id(self, user_id): ...
    def default_document_library(self): ...
    def get_list(self, path): ...
    def get_changes(self, query: Incomplete | None = None): ...
    def get_available_web_templates(
        self, lcid: int = 1033, do_include_cross_language: bool = False
    ): ...
    def hub_site_data(self, force_refresh: bool = False): ...
    def increment_site_client_tag(self): ...
    def apply_web_template(self, web_template): ...
    def get_custom_list_templates(self): ...
    def get_file_by_guest_url(self, guest_url): ...
    def get_file_by_guest_url_extended(
        self,
        guest_url,
        ensure_access: Incomplete | None = None,
        password: Incomplete | None = None,
    ): ...
    def get_file_by_guest_url_ensure_access(self, guest_url, ensure_access): ...
    def get_file_by_linking_url(self, linking_url): ...
    def get_file_by_url(self, file_url): ...
    def get_file_by_wopi_frame_url(self, wopi_frame_url): ...
    def get_folder_by_guest_url(self, guest_url): ...
    def get_folder_by_guest_url_extended(
        self,
        guest_url,
        ensure_access: Incomplete | None = None,
        password: Incomplete | None = None,
    ): ...
    def parse_datetime(
        self, value: str, display_format: int = ..., calendar_type: int = ...
    ) -> ClientResult[str]: ...
    def share(
        self,
        user_principal_name,
        share_option=...,
        send_email: bool = True,
        email_subject: Incomplete | None = None,
        email_body: Incomplete | None = None,
    ): ...
    def unshare(self): ...
    @staticmethod
    def get_document_libraries(context, web_full_url): ...
    @staticmethod
    def default_document_library_url(context, web_url): ...
    @staticmethod
    def delete_all_anonymous_links_for_object(context, url): ...
    @staticmethod
    def delete_anonymous_link_for_object(
        context, url, is_edit_link, remove_associated_sharing_link_group
    ): ...
    @staticmethod
    def get_document_and_media_libraries(
        context, web_full_url, include_page_libraries
    ): ...
    @staticmethod
    def get_sharing_link_kind(
        context, file_url, return_type: Incomplete | None = None
    ): ...
    @staticmethod
    def forward_object_link(
        context,
        url,
        people_picker_input,
        email_subject: Incomplete | None = None,
        email_body: Incomplete | None = None,
    ): ...
    @staticmethod
    def share_object(
        context,
        url,
        people_picker_input,
        role_value: Incomplete | None = None,
        group_id: int = 0,
        propagate_acl: bool = False,
        send_email: bool = True,
        include_anonymous_link_in_email: bool = False,
        email_subject: Incomplete | None = None,
        email_body: Incomplete | None = None,
        use_simplified_roles: bool = True,
        return_type: Incomplete | None = None,
    ): ...
    @staticmethod
    def unshare_object(context, url, return_type: Incomplete | None = None): ...
    def get_file_by_id(self, unique_id): ...
    def get_list_item(self, str_url: str) -> ListItem: ...
    def get_list_item_using_path(self, decoded_url: str) -> ListItem: ...
    def get_catalog(self, type_catalog): ...
    def page_context_info(
        self, include_odb_settings: bool, emit_navigation_info: bool
    ) -> ClientResult[AnyStr]: ...
    def get_storage_entity(self, key): ...
    def set_storage_entity(
        self,
        key,
        value,
        description: Incomplete | None = None,
        comments: Incomplete | None = None,
    ): ...
    def remove_storage_entity(self, key): ...
    def register_push_notification_subscriber(
        self, device_app_instance_id, service_token
    ): ...
    def unregister_push_notification_subscriber(self, device_app_instance_id): ...
    def remove_supported_ui_language(self, lcid): ...
    def set_access_request_site_description_and_update(
        self, description: Incomplete | None = None
    ): ...
    def set_global_nav_settings(self, title, source): ...
    def sync_hub_site_theme(self): ...
    def assign_document_id(self, site_prefix, enabled: bool = True): ...
    @property
    def activities(self) -> EntityCollection[SPActivityEntity]: ...
    @property
    def activity_logger(self): ...
    @property
    def allow_rss_feeds(self) -> bool | None: ...
    @property
    def alternate_css_url(self) -> str | None: ...
    @property
    def app_instance_id(self) -> str | None: ...
    @property
    def author(self): ...
    @property
    def created(self) -> datetime.datetime: ...
    @property
    def custom_master_url(self) -> str | None: ...
    @property
    def custom_site_actions_disabled(self) -> bool | None: ...
    @property
    def description_translations(self): ...
    @property
    def design_package_id(self) -> str | None: ...
    @property
    def disable_app_views(self) -> bool | None: ...
    @property
    def disable_flows(self) -> bool | None: ...
    @property
    def id(self) -> str | None: ...
    @property
    def language(self) -> int | None: ...
    @property
    def last_item_modified_date(self) -> int | None: ...
    @property
    def access_requests_list(self): ...
    @property
    def access_request_list_url(self) -> str | None: ...
    @property
    def allow_designer_for_current_user(self) -> bool | None: ...
    @property
    def allow_master_page_editing_for_current_user(self) -> bool | None: ...
    @property
    def allow_revert_from_template_for_current_user(self) -> bool | None: ...
    @property
    def effective_base_permissions(self): ...
    @property
    def enable_minimal_download(self) -> bool | None: ...
    @property
    def webs(self): ...
    @property
    def folders(self): ...
    @property
    def hosted_apps(self): ...
    @property
    def lists(self) -> ListCollection: ...
    @property
    def onedrive_shared_items(self) -> EntityCollection[SharedDocumentInfo]: ...
    @property
    def site_users(self) -> UserCollection: ...
    @property
    def site_groups(self) -> GroupCollection: ...
    @property
    def current_user(self) -> User: ...
    @property
    def parent_web(self) -> Web: ...
    @property
    def associated_visitor_group(self) -> Group: ...
    @property
    def associated_owner_group(self) -> Group: ...
    @property
    def associated_member_group(self) -> Group: ...
    @property
    def can_modernize_homepage(self): ...
    @property
    def fields(self) -> FieldCollection: ...
    @property
    def content_types(self) -> ContentTypeCollection: ...
    @property
    def configuration(self): ...
    @property
    def data_leakage_prevention_status_info(self): ...
    @property
    def description_resource(self): ...
    @property
    def role_definitions(self) -> RoleDefinitionCollection: ...
    @property
    def event_receivers(self) -> EventReceiverDefinitionCollection: ...
    @property
    def client_web_parts(self): ...
    @property
    def features(self): ...
    @property
    def tenant_app_catalog(self): ...
    @property
    def site_collection_app_catalog(self): ...
    @property
    def web_infos(self): ...
    @property
    def theme_info(self): ...
    @property
    def url(self) -> str | None: ...
    @property
    def quick_launch_enabled(self) -> bool | None: ...
    @property
    def mega_menu_enabled(self) -> bool | None: ...
    @quick_launch_enabled.setter
    def quick_launch_enabled(self, value: bool) -> None: ...
    @property
    def site_logo_url(self) -> str | None: ...
    @property
    def list_templates(self): ...
    @property
    def is_multilingual(self) -> bool | None: ...
    @is_multilingual.setter
    def is_multilingual(self, val: bool) -> None: ...
    @property
    def multilingual_settings(self): ...
    @property
    def web_template(self) -> str | None: ...
    @property
    def regional_settings(self): ...
    @property
    def recycle_bin(self): ...
    @property
    def recycle_bin_enabled(self) -> bool | None: ...
    @property
    def related_hub_site_ids(self) -> str | None: ...
    @property
    def request_access_email(self) -> str | None: ...
    @property
    def save_site_as_template_enabled(self) -> bool | None: ...
    @property
    def search_box_in_navbar(self) -> int | None: ...
    @property
    def search_box_placeholder_text(self) -> str | None: ...
    @property
    def navigation(self): ...
    @property
    def push_notification_subscribers(self): ...
    @property
    def root_folder(self): ...
    @property
    def alerts(self) -> AlertCollection: ...
    @property
    def available_fields(self) -> FieldCollection: ...
    @property
    def available_content_types(self) -> ContentTypeCollection: ...
    @property
    def site_user_info_list(self): ...
    @property
    def title(self) -> str | None: ...
    @property
    def welcome_page(self) -> str | None: ...
    @property
    def supported_ui_language_ids(self): ...
    @property
    def ui_version(self) -> int | None: ...
    @property
    def user_custom_actions(self): ...
    @property
    def server_relative_path(self): ...
    @property
    def syndication_enabled(self) -> bool | None: ...
    @property
    def title_resource(self): ...
    @property
    def treeview_enabled(self) -> bool | None: ...
    @property
    def taxonomy_list(self): ...
    def get_property(self, name, default_value: Incomplete | None = None): ...
    def set_property(self, name, value, persist_changes: bool = True): ...
    @property
    def resource_url(self): ...

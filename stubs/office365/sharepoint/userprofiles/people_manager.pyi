from office365.runtime.client_result import ClientResult as ClientResult
from office365.runtime.paths.resource_path import ResourcePath as ResourcePath
from office365.runtime.queries.service_operation import (
    ServiceOperationQuery as ServiceOperationQuery,
)
from office365.runtime.types.collections import StringCollection as StringCollection
from office365.sharepoint.entity import Entity as Entity
from office365.sharepoint.entity_collection import EntityCollection as EntityCollection
from office365.sharepoint.principal.users.user import User as User
from office365.sharepoint.userprofiles.hash_tag import (
    HashTagCollection as HashTagCollection,
)
from office365.sharepoint.userprofiles.person_properties import (
    PersonProperties as PersonProperties,
)
from office365.sharepoint.userprofiles.personal_site_creation_priority import (
    PersonalSiteCreationPriority as PersonalSiteCreationPriority,
)

class PeopleManager(Entity):
    def __init__(self, context) -> None: ...
    @staticmethod
    def get_trending_tags(context): ...
    def get_user_onedrive_quota_max(self, account_name): ...
    def am_i_following(self, account_name): ...
    def get_followers_for(
        self, account: str | User
    ) -> EntityCollection[PersonProperties]: ...
    def get_user_information(self, account_name, site_id): ...
    def follow(self, account_name): ...
    def stop_following(self, account_name): ...
    def stop_following_tag(self, value): ...
    def get_user_profile_properties(
        self, user_or_name: str | User
    ) -> ClientResult[dict]: ...
    def get_properties_for(self, account): ...
    def get_default_document_library(
        self,
        user_or_name,
        create_site_if_not_exists: bool = False,
        site_creation_priority=...,
    ): ...
    def get_people_followed_by(self, account_name): ...
    def get_my_followers(self): ...
    def follow_tag(self, value): ...
    def hide_suggestion(self, account_name): ...
    def reset_user_onedrive_quota_to_default(self, account_name): ...
    def set_my_profile_picture(self, picture): ...
    def set_user_onedrive_quota(self, account_name, new_quota, new_quota_warning): ...
    def set_multi_valued_profile_property(
        self, account_name, property_name, property_values
    ): ...
    def set_single_value_profile_property(
        self, account_name, property_name, property_value
    ): ...
    @property
    def entity_type_name(self): ...

from _typeshed import Incomplete
from datetime import datetime
from office365.runtime.client_result import ClientResult as ClientResult
from office365.runtime.client_value_collection import ClientValueCollection as ClientValueCollection
from office365.runtime.paths.resource_path import ResourcePath as ResourcePath
from office365.runtime.queries.service_operation import ServiceOperationQuery as ServiceOperationQuery
from office365.runtime.queries.update_entity import UpdateEntityQuery as UpdateEntityQuery
from office365.sharepoint.changes.collection import ChangeCollection as ChangeCollection
from office365.sharepoint.changes.query import ChangeQuery as ChangeQuery
from office365.sharepoint.contenttypes.content_type_id import ContentTypeId as ContentTypeId
from office365.sharepoint.entity import Entity as Entity
from office365.sharepoint.files.collection import FileCollection as FileCollection
from office365.sharepoint.folders.collection import FolderCollection as FolderCollection
from office365.sharepoint.listitems.listitem import ListItem as ListItem
from office365.sharepoint.sharing.document_manager import DocumentSharingManager as DocumentSharingManager
from office365.sharepoint.sharing.links.share_response import ShareLinkResponse as ShareLinkResponse
from office365.sharepoint.sharing.user_sharing_result import UserSharingResult as UserSharingResult
from office365.sharepoint.storagemetrics.storage_metrics import StorageMetrics as StorageMetrics
from office365.sharepoint.types.resource_path import ResourcePath as SPResPath
from office365.sharepoint.utilities.move_copy_options import MoveCopyOptions as MoveCopyOptions
from office365.sharepoint.utilities.move_copy_util import MoveCopyUtil as MoveCopyUtil
from typing_extensions import Self

class Folder(Entity):
    @staticmethod
    def from_url(abs_url): ...
    def download_folder(self, download_file, after_file_downloaded: Incomplete | None = None, recursive: bool = True): ...
    def get_folders(self, recursive: bool = False): ...
    def get_files(self, recursive: bool = False): ...
    def get_sharing_information(self): ...
    def move_to(self, destination): ...
    def move_to_using_path(self, destination): ...
    def move_to_using_path_with_parameters(self, new_relative_path, retain_editor_and_modified: bool = False): ...
    def share_link(self, link_kind: int, expiration: datetime | None = None, role: int | None = None, password: str | None = None) -> ClientResult[ShareLinkResponse]: ...
    def unshare_link(self, link_kind, share_id: Incomplete | None = None): ...
    def recycle(self): ...
    def recycle_with_parameters(self, parameters): ...
    def get_changes(self, query: Incomplete | None = None): ...
    def get_list_item_changes(self, query): ...
    def add(self, name: str) -> Self: ...
    def rename(self, name: str) -> Self: ...
    def upload_file(self, file_name, content): ...
    def update_document_sharing_info(self, user_role_assignments, validate_existing_permissions: Incomplete | None = None, additive_mode: Incomplete | None = None, send_server_managed_notification: Incomplete | None = None, custom_message: Incomplete | None = None, include_anonymous_links_in_notification: Incomplete | None = None, propagate_acl: Incomplete | None = None): ...
    def copy_to(self, destination: str | Folder, keep_both: bool = False, reset_author_and_created: bool = False) -> Folder: ...
    def copy_to_using_path(self, destination: str | Folder, keep_both: bool = False, reset_author_and_created: bool = False) -> Folder: ...
    @property
    def storage_metrics(self) -> StorageMetrics: ...
    @property
    def list_item_all_fields(self) -> ListItem: ...
    @property
    def files(self) -> FileCollection: ...
    @property
    def folders(self) -> FolderCollection: ...
    @property
    def parent_folder(self) -> Folder: ...
    @property
    def name(self) -> str | None: ...
    @property
    def is_wopi_enabled(self) -> bool | None: ...
    @property
    def prog_id(self) -> str | None: ...
    @property
    def unique_id(self) -> str | None: ...
    @property
    def exists(self) -> bool | None: ...
    @property
    def welcome_page(self) -> str | None: ...
    @property
    def unique_content_type_order(self): ...
    @property
    def content_type_order(self): ...
    @property
    def time_last_modified(self) -> datetime | None: ...
    @property
    def time_created(self) -> datetime | None: ...
    @property
    def serverRelativeUrl(self) -> str | None: ...
    @property
    def server_relative_path(self) -> SPResPath | None: ...
    @property
    def property_ref_name(self) -> str | None: ...
    def get_property(self, name, default_value: Incomplete | None = None): ...
    def set_property(self, name, value, persist_changes: bool = True): ...

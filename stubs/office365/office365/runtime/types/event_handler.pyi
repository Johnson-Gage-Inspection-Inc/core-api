from typing import Any, Callable, Iterator, TypeVar
from typing_extensions import Self

F = TypeVar("F", bound=Callable[..., None])

class EventHandler:
    def __init__(self, once: bool = False) -> None: ...
    def __contains__(self, listener: F) -> bool: ...
    def __iter__(self) -> Iterator[F]: ...
    def __iadd__(self, listener: F) -> Self: ...
    def __isub__(self, listener: F) -> Self: ...
    def __len__(self) -> int: ...
    def notify(self, *args: Any, **kwargs: Any) -> None: ...
    @staticmethod
    def is_system(listener: F) -> bool: ...

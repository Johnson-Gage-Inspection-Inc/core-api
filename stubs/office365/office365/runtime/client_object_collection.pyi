from office365.runtime.client_object import ClientObject as ClientObject
from office365.runtime.client_runtime_context import (
    ClientRuntimeContext as ClientRuntimeContext,
)
from office365.runtime.http.request_options import RequestOptions as RequestOptions
from office365.runtime.odata.json_format import ODataJsonFormat as ODataJsonFormat
from office365.runtime.paths.resource_path import ResourcePath as ResourcePath
from office365.runtime.types.event_handler import EventHandler as EventHandler
from office365.runtime.types.exceptions import NotFoundException as NotFoundException
from typing import Callable, Generic, Iterator, TypeVar
from typing_extensions import Self

T = TypeVar("T")

class ClientObjectCollection(ClientObject, Generic[T]):
    def __init__(
        self,
        context: ClientRuntimeContext,
        item_type: type[T],
        resource_path: ResourcePath | None = None,
        parent: ClientObject | None = None,
    ) -> None: ...
    def clear_state(self): ...
    def create_typed_object(
        self,
        initial_properties: dict | None = None,
        resource_path: ResourcePath | None = None,
    ) -> T: ...
    def set_property(
        self, key: str | int, value: dict, persist_changes: bool = False
    ) -> Self: ...
    def add_child(self, client_object: T) -> Self: ...
    def remove_child(self, client_object: T) -> Self: ...
    def __iter__(self) -> Iterator[T]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, index: int) -> T: ...
    def to_json(self, json_format: ODataJsonFormat | None = None) -> list[dict]: ...
    def filter(self, expression: str) -> Self: ...
    def order_by(self, value: str) -> Self: ...
    def skip(self, value: int) -> Self: ...
    def top(self, value: int) -> Self: ...
    def paged(
        self, page_size: int = None, page_loaded: Callable[[Self], None] | None = None
    ) -> Self: ...
    def get(self) -> Self: ...
    def get_all(
        self, page_size: int = None, page_loaded: Callable[[Self], None] | None = None
    ) -> Self: ...
    def first(self, expression: str) -> T: ...
    def single(self, expression: str) -> T: ...
    @property
    def parent(self) -> ClientObject: ...
    @property
    def has_next(self) -> bool: ...
    @property
    def current_page(self) -> list[T]: ...
    @property
    def entity_type_name(self) -> str: ...

from office365.runtime.client_value import ClientValue as ClientValue
from office365.runtime.odata.json_format import ODataJsonFormat as ODataJsonFormat
from office365.runtime.odata.type import ODataType as ODataType
from office365.runtime.odata.v3.json_light_format import (
    JsonLightFormat as JsonLightFormat,
)
from typing import Any, Generic, Iterator, TypeVar
from typing_extensions import Self

T = TypeVar("T")

class ClientValueCollection(ClientValue, Generic[T]):
    def __init__(
        self, item_type: type[T], initial_values: list | dict | None = None
    ) -> None: ...
    def add(self, value: T) -> Self: ...
    def __getitem__(self, index: int) -> T: ...
    def __iter__(self) -> Iterator[T]: ...
    def __len__(self) -> int: ...
    def to_json(self, json_format: ODataJsonFormat = None) -> list: ...
    def create_typed_value(self, initial_value: T | None = None) -> T: ...
    def set_property(
        self, index: str | int, value: Any, persist_changes: bool = False
    ) -> Self: ...
    @property
    def entity_type_name(self): ...

from _typeshed import Incomplete
from office365.directory.permissions.identity_set import IdentitySet as IdentitySet
from office365.entity_collection import EntityCollection as EntityCollection
from office365.onedrive.base_item import BaseItem as BaseItem
from office365.onedrive.driveitems.conflict_behavior import (
    ConflictBehavior as ConflictBehavior,
)
from office365.onedrive.driveitems.driveItem import DriveItem as DriveItem
from office365.onedrive.driveitems.system_facet import SystemFacet as SystemFacet
from office365.onedrive.drives.quota import Quota as Quota
from office365.onedrive.internal.paths.root import RootPath as RootPath
from office365.onedrive.lists.list import List as List
from office365.onedrive.sharepoint_ids import SharePointIds as SharePointIds
from office365.runtime.paths.resource_path import ResourcePath as ResourcePath
from office365.runtime.queries.create_entity import (
    CreateEntityQuery as CreateEntityQuery,
)
from office365.runtime.queries.function import FunctionQuery as FunctionQuery

class Drive(BaseItem):
    def create_bundle(self, name, children: Incomplete | None = None): ...
    def search(self, query_text): ...
    def recent(self): ...
    def shared_with_me(self): ...
    @property
    def drive_type(self) -> str | None: ...
    @property
    def sharepoint_ids(self): ...
    @property
    def system(self): ...
    @property
    def owner(self): ...
    @property
    def root(self) -> DriveItem: ...
    @property
    def list(self) -> List: ...
    @property
    def bundles(self) -> EntityCollection[DriveItem]: ...
    @property
    def items(self) -> EntityCollection[DriveItem]: ...
    @property
    def following(self) -> EntityCollection[DriveItem]: ...
    @property
    def quota(self): ...
    @property
    def special(self) -> EntityCollection[DriveItem]: ...
    def get_property(self, name, default_value: Incomplete | None = None): ...

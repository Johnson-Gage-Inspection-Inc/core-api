from _typeshed import Incomplete
from office365.directory.extensions.extended_property import MultiValueLegacyExtendedProperty as MultiValueLegacyExtendedProperty, SingleValueLegacyExtendedProperty as SingleValueLegacyExtendedProperty
from office365.directory.extensions.extension import Extension as Extension
from office365.entity_collection import EntityCollection as EntityCollection
from office365.outlook.item import OutlookItem as OutlookItem
from office365.outlook.mail.attachments.collection import AttachmentCollection as AttachmentCollection
from office365.outlook.mail.item_body import ItemBody as ItemBody
from office365.outlook.mail.messages.followup_flag import FollowupFlag as FollowupFlag
from office365.outlook.mail.messages.internet_header import InternetMessageHeader as InternetMessageHeader
from office365.outlook.mail.recipient import Recipient as Recipient
from office365.runtime.client_result import ClientResult as ClientResult
from office365.runtime.client_value_collection import ClientValueCollection as ClientValueCollection
from office365.runtime.paths.resource_path import ResourcePath as ResourcePath
from office365.runtime.queries.function import FunctionQuery as FunctionQuery
from office365.runtime.queries.service_operation import ServiceOperationQuery as ServiceOperationQuery
from typing import AnyStr, IO
from typing_extensions import Self

class Message(OutlookItem):
    def add_extended_property(self, name: str, value: str) -> Self: ...
    def create_forward(self, to_recipients: list[Recipient] = None, message: Message = None, comment: str = None) -> Message: ...
    def download(self, file_object: IO) -> Self: ...
    def get_content(self) -> ClientResult[AnyStr]: ...
    def add_file_attachment(self, name, content: Incomplete | None = None, content_type: Incomplete | None = None, base64_content: Incomplete | None = None): ...
    def upload_attachment(self, file_path, chunk_uploaded: Incomplete | None = None): ...
    def send(self): ...
    def reply(self, comment: Incomplete | None = None): ...
    def reply_all(self): ...
    def create_reply(self, comment: Incomplete | None = None): ...
    def create_reply_all(self): ...
    def move(self, destination): ...
    def forward(self, to_recipients, comment: str = ''): ...
    @property
    def has_attachments(self) -> bool | None: ...
    @property
    def attachments(self) -> AttachmentCollection: ...
    @property
    def extensions(self) -> EntityCollection[Extension]: ...
    @property
    def body(self): ...
    @body.setter
    def body(self, value: str | ItemBody | tuple) -> None: ...
    @property
    def body_preview(self) -> str | None: ...
    @property
    def conversation_id(self) -> str | None: ...
    @property
    def conversation_index(self) -> str | None: ...
    @property
    def flag(self): ...
    @property
    def sent_from(self): ...
    @property
    def importance(self) -> str | None: ...
    @property
    def inference_classification(self) -> str | None: ...
    @property
    def internet_message_headers(self) -> ClientValueCollection[InternetMessageHeader]: ...
    @property
    def internet_message_id(self) -> str | None: ...
    @property
    def is_delivery_receipt_requested(self) -> bool | None: ...
    @property
    def is_draft(self) -> bool | None: ...
    @property
    def is_read(self) -> bool | None: ...
    @property
    def is_read_receipt_requested(self) -> bool | None: ...
    @property
    def received_datetime(self): ...
    @property
    def sent_datetime(self): ...
    @property
    def subject(self) -> str | None: ...
    @subject.setter
    def subject(self, value: str) -> None: ...
    @property
    def to_recipients(self): ...
    @property
    def bcc_recipients(self): ...
    @property
    def cc_recipients(self): ...
    @property
    def reply_to(self): ...
    @property
    def sender(self): ...
    @property
    def parent_folder_id(self) -> str | None: ...
    @property
    def web_link(self) -> str | None: ...
    @property
    def multi_value_extended_properties(self) -> EntityCollection[MultiValueLegacyExtendedProperty]: ...
    @property
    def single_value_extended_properties(self) -> EntityCollection[SingleValueLegacyExtendedProperty]: ...
    def get_property(self, name, default_value: Incomplete | None = None): ...

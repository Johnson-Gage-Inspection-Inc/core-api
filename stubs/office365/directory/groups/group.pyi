from _typeshed import Incomplete
from office365.directory.applications.roles.assignment_collection import (
    AppRoleAssignmentCollection as AppRoleAssignmentCollection,
)
from office365.directory.extensions.extension import Extension as Extension
from office365.directory.groups.assigned_label import AssignedLabel as AssignedLabel
from office365.directory.licenses.assigned_license import (
    AssignedLicense as AssignedLicense,
)
from office365.directory.licenses.processing_state import (
    LicenseProcessingState as LicenseProcessingState,
)
from office365.directory.object import DirectoryObject as DirectoryObject
from office365.directory.object_collection import (
    DirectoryObjectCollection as DirectoryObjectCollection,
)
from office365.directory.permissions.grants.resource_specific import (
    ResourceSpecificPermissionGrant as ResourceSpecificPermissionGrant,
)
from office365.directory.profile_photo import ProfilePhoto as ProfilePhoto
from office365.entity_collection import EntityCollection as EntityCollection
from office365.onedrive.drives.drive import Drive as Drive
from office365.onenote.onenote import Onenote as Onenote
from office365.outlook.calendar.events.collection import (
    EventCollection as EventCollection,
)
from office365.outlook.mail.conversation import Conversation as Conversation
from office365.outlook.mail.conversation_thread import (
    ConversationThread as ConversationThread,
)
from office365.planner.group import PlannerGroup as PlannerGroup
from office365.runtime.client_value_collection import (
    ClientValueCollection as ClientValueCollection,
)
from office365.runtime.http.http_method import HttpMethod as HttpMethod
from office365.runtime.http.request_options import RequestOptions as RequestOptions
from office365.runtime.paths.resource_path import ResourcePath as ResourcePath
from office365.runtime.queries.service_operation import (
    ServiceOperationQuery as ServiceOperationQuery,
)
from office365.runtime.types.collections import StringCollection as StringCollection
from office365.teams.team import Team as Team

class Group(DirectoryObject):
    def renew(self): ...
    def add_favorite(self): ...
    def check_granted_permissions_for_app(self): ...
    def remove_favorite(self): ...
    def reset_unseen_count(self): ...
    def subscribe_by_mail(self): ...
    def unsubscribe_by_mail(self): ...
    def add_team(self): ...
    def delete_object(self, permanent_delete: bool = False): ...
    @property
    def assigned_labels(self) -> ClientValueCollection[AssignedLabel]: ...
    @property
    def classification(self) -> str | None: ...
    @property
    def display_name(self) -> str | None: ...
    @property
    def group_types(self): ...
    @property
    def has_members_with_license_errors(self) -> bool | None: ...
    @property
    def is_assignable_to_role(self) -> bool | None: ...
    @property
    def license_processing_state(self): ...
    @property
    def mail(self) -> str | None: ...
    @property
    def mail_enabled(self) -> bool | None: ...
    @property
    def mail_nickname(self) -> str | None: ...
    @property
    def on_premises_domain_name(self) -> str | None: ...
    @property
    def conversations(self) -> EntityCollection[Conversation]: ...
    @property
    def created_datetime(self): ...
    @property
    def extensions(self) -> EntityCollection[Extension]: ...
    @property
    def members(self): ...
    @property
    def transitive_members(self): ...
    @property
    def transitive_member_of(self): ...
    @property
    def threads(self) -> EntityCollection[ConversationThread]: ...
    @property
    def owners(self): ...
    @property
    def drives(self) -> EntityCollection[Drive]: ...
    @property
    def sites(self): ...
    @property
    def events(self) -> EventCollection: ...
    @property
    def app_role_assignments(self): ...
    @property
    def onenote(self): ...
    @property
    def planner(self): ...
    @property
    def permission_grants(
        self,
    ) -> EntityCollection[ResourceSpecificPermissionGrant]: ...
    @property
    def photo(self): ...
    @property
    def team(self): ...
    @property
    def assigned_licenses(self): ...
    def get_property(self, name, default_value: Incomplete | None = None): ...

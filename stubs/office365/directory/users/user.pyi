from datetime import datetime

from _typeshed import Incomplete
from office365.communications.onlinemeetings.collection import (
    OnlineMeetingCollection as OnlineMeetingCollection,
)
from office365.communications.presences.presence import Presence as Presence
from office365.delta_collection import DeltaCollection as DeltaCollection
from office365.directory.applications.roles.assignment_collection import (
    AppRoleAssignmentCollection as AppRoleAssignmentCollection,
)
from office365.directory.audit.signins.activity import SignInActivity as SignInActivity
from office365.directory.authentication.authentication import (
    Authentication as Authentication,
)
from office365.directory.extensions.extension import Extension as Extension
from office365.directory.identities.object_identity import (
    ObjectIdentity as ObjectIdentity,
)
from office365.directory.identitygovernance.termsofuse.agreement_acceptance import (
    AgreementAcceptance as AgreementAcceptance,
)
from office365.directory.insights.office_graph import (
    OfficeGraphInsights as OfficeGraphInsights,
)
from office365.directory.licenses.assigned_license import (
    AssignedLicense as AssignedLicense,
)
from office365.directory.licenses.assigned_plan import AssignedPlan as AssignedPlan
from office365.directory.licenses.assignment_state import (
    LicenseAssignmentState as LicenseAssignmentState,
)
from office365.directory.licenses.details import LicenseDetails as LicenseDetails
from office365.directory.object import DirectoryObject as DirectoryObject
from office365.directory.object_collection import (
    DirectoryObjectCollection as DirectoryObjectCollection,
)
from office365.directory.permissions.grants.oauth2 import (
    OAuth2PermissionGrant as OAuth2PermissionGrant,
)
from office365.directory.profile_photo import ProfilePhoto as ProfilePhoto
from office365.directory.users.activities.collection import (
    UserActivityCollection as UserActivityCollection,
)
from office365.directory.users.password_profile import (
    PasswordProfile as PasswordProfile,
)
from office365.directory.users.settings import UserSettings as UserSettings
from office365.entity_collection import EntityCollection as EntityCollection
from office365.intune.devices.data import (
    DeviceAndAppManagementData as DeviceAndAppManagementData,
)
from office365.intune.devices.managed import ManagedDevice as ManagedDevice
from office365.intune.devices.managed_app_diagnostic_status import (
    ManagedAppDiagnosticStatus as ManagedAppDiagnosticStatus,
)
from office365.intune.policies.managed_app import ManagedAppPolicy as ManagedAppPolicy
from office365.onedrive.drives.drive import Drive as Drive
from office365.onedrive.sites.site import Site as Site
from office365.onenote.onenote import Onenote as Onenote
from office365.outlook.calendar.attendees.base import AttendeeBase as AttendeeBase
from office365.outlook.calendar.calendar import Calendar as Calendar
from office365.outlook.calendar.dateTimeTimeZone import (
    DateTimeTimeZone as DateTimeTimeZone,
)
from office365.outlook.calendar.events.event import Event as Event
from office365.outlook.calendar.events.reminder import Reminder as Reminder
from office365.outlook.calendar.group import CalendarGroup as CalendarGroup
from office365.outlook.calendar.meetingtimes.suggestions_result import (
    MeetingTimeSuggestionsResult as MeetingTimeSuggestionsResult,
)
from office365.outlook.contacts.collection import ContactCollection as ContactCollection
from office365.outlook.contacts.folder import ContactFolder as ContactFolder
from office365.outlook.convert_id_result import ConvertIdResult as ConvertIdResult
from office365.outlook.mail.folders.collection import (
    MailFolderCollection as MailFolderCollection,
)
from office365.outlook.mail.item_body import ItemBody as ItemBody
from office365.outlook.mail.mailbox_settings import MailboxSettings as MailboxSettings
from office365.outlook.mail.messages.collection import (
    MessageCollection as MessageCollection,
)
from office365.outlook.mail.messages.message import Message as Message
from office365.outlook.mail.recipient import Recipient as Recipient
from office365.outlook.mail.tips.tips import MailTips as MailTips
from office365.outlook.person import Person as Person
from office365.outlook.user import OutlookUser as OutlookUser
from office365.planner.user import PlannerUser as PlannerUser
from office365.runtime.client_result import ClientResult as ClientResult
from office365.runtime.client_value_collection import (
    ClientValueCollection as ClientValueCollection,
)
from office365.runtime.http.http_method import HttpMethod as HttpMethod
from office365.runtime.http.request_options import RequestOptions as RequestOptions
from office365.runtime.paths.resource_path import ResourcePath as ResourcePath
from office365.runtime.paths.v4.entity import EntityPath as EntityPath
from office365.runtime.queries.create_entity import (
    CreateEntityQuery as CreateEntityQuery,
)
from office365.runtime.queries.function import FunctionQuery as FunctionQuery
from office365.runtime.queries.service_operation import (
    ServiceOperationQuery as ServiceOperationQuery,
)
from office365.runtime.types.collections import StringCollection as StringCollection
from office365.teams.chats.collection import ChatCollection as ChatCollection
from office365.teams.collection import TeamCollection as TeamCollection
from office365.teams.teamwork.shiftmanagement.user_solution_root import (
    UserSolutionRoot as UserSolutionRoot,
)
from office365.teams.teamwork.user import UserTeamwork as UserTeamwork
from office365.teams.viva.employee_experience_user import (
    EmployeeExperienceUser as EmployeeExperienceUser,
)
from office365.todo.todo import Todo as Todo
from typing_extensions import Self

class User(DirectoryObject):
    def enable_automatic_replies_setting(
        self,
        status: str,
        scheduled_start_datetime: datetime,
        scheduled_end_datetime: datetime,
        internal_reply_message: str = None,
        external_reply_message: str = None,
    ) -> Self: ...
    def disable_automatic_replies_setting(self, clear_all: bool = False): ...
    def add_extension(self, name): ...
    def assign_license(self, add_licenses, remove_licenses): ...
    def assign_manager(self, user): ...
    def remove_manager(self): ...
    def change_password(self, current_password, new_password): ...
    def get_mail_tips(
        self, email_addresses, mail_tips_options: Incomplete | None = None
    ): ...
    def get_my_site(self): ...
    def send_mail(
        self,
        subject: str,
        body: str | ItemBody,
        to_recipients: list[str],
        cc_recipients: list[str] | None = None,
        bcc_recipients: list[str] | None = None,
        reply_to: list[str] | None = None,
        save_to_sent_items: bool = False,
        body_type: str = "Text",
    ) -> Message: ...
    def export_personal_data(self, storage_location): ...
    def export_device_and_app_management_data(self): ...
    def find_meeting_times(
        self,
        attendees: Incomplete | None = None,
        location_constraint: Incomplete | None = None,
        time_constraint: Incomplete | None = None,
        meeting_duration: Incomplete | None = None,
        max_candidates: Incomplete | None = None,
        is_organizer_optional: Incomplete | None = None,
        return_suggestion_reasons: Incomplete | None = None,
        minimum_attendee_percentage: Incomplete | None = None,
    ): ...
    def get_calendar_view(self, start_dt, end_dt): ...
    def get_reminder_view(self, start_dt, end_dt): ...
    def get_managed_app_diagnostic_statuses(self): ...
    def get_managed_app_policies(self): ...
    def delete_object(self, permanent_delete: bool = False): ...
    def revoke_signin_sessions(self) -> ClientResult[bool]: ...
    def reprocess_license_assignment(self): ...
    def remove_all_devices_from_management(self): ...
    def wipe_managed_app_registrations_by_device_tag(self, device_tag): ...
    def translate_exchange_ids(
        self,
        input_ids,
        source_id_type: Incomplete | None = None,
        target_id_type: Incomplete | None = None,
    ): ...
    @property
    def created_datetime(self) -> datetime | None: ...
    @property
    def created_objects(self): ...
    @property
    def device_enrollment_limit(self) -> str | None: ...
    @property
    def sign_in_activity(self): ...
    @property
    def account_enabled(self) -> bool | None: ...
    @property
    def age_group(self) -> str | None: ...
    @property
    def app_role_assignments(self): ...
    @property
    def chats(self) -> ChatCollection: ...
    @property
    def given_name(self) -> str | None: ...
    @property
    def my_site(self) -> str | None: ...
    @property
    def office_location(self) -> str | None: ...
    @property
    def user_principal_name(self) -> str | None: ...
    @property
    def assigned_plans(self): ...
    @property
    def authentication(self): ...
    @property
    def business_phones(self): ...
    @property
    def creation_type(self) -> str | None: ...
    @property
    def license_assignment_states(self): ...
    @property
    def mail(self) -> str | None: ...
    @property
    def other_mails(self): ...
    @property
    def interests(self): ...
    @property
    def identities(self): ...
    @property
    def activities(self) -> UserActivityCollection: ...
    @property
    def assigned_licenses(self) -> ClientValueCollection[AssignedLicense]: ...
    @property
    def followed_sites(self): ...
    @property
    def insights(self) -> OfficeGraphInsights: ...
    @property
    def photo(self): ...
    @property
    def photos(self): ...
    @property
    def manager(self): ...
    @property
    def preferred_language(self) -> str | None: ...
    @property
    def mailbox_settings(self): ...
    @mailbox_settings.setter
    def mailbox_settings(self, value) -> None: ...
    @property
    def calendar(self) -> Calendar: ...
    @property
    def calendars(self) -> EntityCollection[Calendar]: ...
    @property
    def calendar_groups(self) -> EntityCollection[CalendarGroup]: ...
    @property
    def license_details(self) -> EntityCollection[LicenseDetails]: ...
    @property
    def drive(self) -> Drive: ...
    @property
    def contacts(self) -> ContactCollection: ...
    @property
    def contact_folders(self) -> DeltaCollection[ContactFolder]: ...
    @property
    def events(self) -> DeltaCollection[Event]: ...
    @property
    def messages(self) -> MessageCollection: ...
    @property
    def joined_teams(self) -> TeamCollection: ...
    @property
    def managed_devices(self) -> EntityCollection[ManagedDevice]: ...
    @property
    def member_of(self) -> DirectoryObjectCollection: ...
    @property
    def oauth2_permission_grants(self) -> DeltaCollection[OAuth2PermissionGrant]: ...
    @property
    def on_premises_distinguished_name(self) -> str | None: ...
    @property
    def on_premises_domain_name(self) -> str | None: ...
    @property
    def owned_devices(self): ...
    @property
    def owned_objects(self): ...
    @property
    def proxy_addresses(self): ...
    @property
    def transitive_member_of(self): ...
    @property
    def mail_folders(self) -> MailFolderCollection: ...
    @property
    def outlook(self) -> OutlookUser: ...
    @property
    def people(self) -> EntityCollection[Person]: ...
    @property
    def onenote(self) -> Onenote: ...
    @property
    def settings(self): ...
    @property
    def planner(self): ...
    @property
    def agreement_acceptances(self): ...
    @property
    def extensions(self) -> EntityCollection[Extension]: ...
    @property
    def direct_reports(self): ...
    @property
    def online_meetings(self): ...
    @property
    def password_policies(self) -> str | None: ...
    @property
    def password_profile(self): ...
    @property
    def presence(self): ...
    @property
    def registered_devices(self): ...
    @property
    def street_address(self) -> str | None: ...
    @property
    def security_identifier(self) -> str | None: ...
    @property
    def teamwork(self) -> UserTeamwork: ...
    @property
    def solutions(self) -> UserSolutionRoot: ...
    @property
    def todo(self) -> Todo: ...
    @property
    def employee_experience(self): ...
    @property
    def usage_location(self) -> str | None: ...
    def get_property(self, name, default_value: Incomplete | None = None): ...
    def set_property(self, name, value, persist_changes: bool = True): ...

from _typeshed import Incomplete
from office365.directory.applications.api import ApiApplication as ApiApplication
from office365.directory.applications.optional_claims import OptionalClaims as OptionalClaims
from office365.directory.applications.public_client import PublicClientApplication as PublicClientApplication
from office365.directory.applications.required_resource_access import RequiredResourceAccess as RequiredResourceAccess
from office365.directory.applications.roles.role import AppRole as AppRole
from office365.directory.applications.spa import SpaApplication as SpaApplication
from office365.directory.certificates.certification import Certification as Certification
from office365.directory.extensions.extension_property import ExtensionProperty as ExtensionProperty
from office365.directory.key_credential import KeyCredential as KeyCredential
from office365.directory.object import DirectoryObject as DirectoryObject
from office365.directory.object_collection import DirectoryObjectCollection as DirectoryObjectCollection
from office365.directory.password_credential import PasswordCredential as PasswordCredential
from office365.directory.policies.token_issuance import TokenIssuancePolicy as TokenIssuancePolicy
from office365.entity_collection import EntityCollection as EntityCollection
from office365.runtime.client_result import ClientResult as ClientResult
from office365.runtime.client_value_collection import ClientValueCollection as ClientValueCollection
from office365.runtime.paths.resource_path import ResourcePath as ResourcePath
from office365.runtime.queries.service_operation import ServiceOperationQuery as ServiceOperationQuery
from office365.runtime.types.collections import StringCollection as StringCollection

class Application(DirectoryObject):
    def add_certificate(self, cert_data, display_name, start_datetime: Incomplete | None = None, end_datetime: Incomplete | None = None): ...
    def remove_certificate(self, thumbprint) -> None: ...
    def add_password(self, display_name): ...
    def remove_password(self, key_id): ...
    def delete_object(self, permanent_delete: bool = False): ...
    def set_verified_publisher(self, verified_publisher_id): ...
    def unset_verified_publisher(self): ...
    def add_key(self, key_credential, password_credential, proof): ...
    def remove_key(self, key_id, proof): ...
    @property
    def app_id(self) -> str | None: ...
    @property
    def application_template_id(self) -> str | None: ...
    @property
    def app_roles(self) -> ClientValueCollection[AppRole]: ...
    @property
    def api(self): ...
    @property
    def certification(self): ...
    @property
    def created_datetime(self): ...
    @property
    def default_redirect_uri(self) -> str | None: ...
    @property
    def spa(self): ...
    @property
    def key_credentials(self): ...
    @property
    def display_name(self) -> str | None: ...
    @property
    def identifier_uris(self): ...
    @property
    def optional_claims(self): ...
    @property
    def password_credentials(self): ...
    @property
    def public_client(self): ...
    @property
    def signin_audience(self) -> str | None: ...
    @property
    def created_on_behalf_of(self) -> DirectoryObject: ...
    @property
    def owners(self) -> DirectoryObjectCollection: ...
    @property
    def extension_properties(self) -> EntityCollection[ExtensionProperty]: ...
    @property
    def required_resource_access(self): ...
    @property
    def token_issuance_policies(self) -> EntityCollection[TokenIssuancePolicy]: ...
    def get_property(self, name, default_value: Incomplete | None = None): ...
